apiVersion: nais.io/v1alpha1
kind: Application
metadata:
  labels:
    team: nada
  name: metabase
  namespace: nada
  annotations:
    {{#each annotations}}
    {{this.key}}: "{{this.value}}"
    {{/each}}
spec:
  env:
  - name: MB_SITE_URL
    value: https://metabase.intern.nav.no
  {{#each envs}}
  - name: {{this.name}}
    value: "{{this.value}}"
  {{/each}}
  envFrom:
  - secret: metabase
  gcp:
    sqlInstances:
    - databases:
      - name: metabase
      type: POSTGRES_12
      flags:
        - name: max_connections
          value: "50"
  image: {{image}}
  ingresses:
  - https://metabase.intern.nav.no
  liveness:
    initialDelay: 80
    path: /api/health
  port: 3000
  readiness:
    initialDelay: 80
    path: /api/health
  replicas:
    max: 4
    min: 2
  resources:
    limits:
      cpu: 500m
      memory: 4Gi
    requests:
      cpu: 200m
      memory: 1024Mi
  accessPolicy:
    inbound:
      rules:
        - application: nada-backend

---
apiVersion: "nais.io/v1"
kind: "Alert"
metadata:
  name: metabase
  namespace: nada
  labels:
    team: nada
spec:
  receivers:
    slack:
      channel: '#nada-alerts'
      prependText: '<!here> | '
  alerts:
    - alert: metabase nede
      expr: kube_deployment_status_replicas_available{deployment="metabase"} == 0
      for: 2m
      description: "App {{ $labels.deployment }} er nede i namespace {{ $labels.kubernetes_namespace }}"
      action: "`kubectl describe pod -l app={{ $labels.deployment }} -n {{ $labels.namespace }}` for events, og `kubectl logs -l app={{ $labels.deployment }} -n {{ $labels.namespace }}` for logger"

---
apiVersion: "nais.io/v1"
kind: "Alert"
metadata:
  name: metabase-nais-alerts
  namespace: nada
  labels:
    team: nada
spec:
  receivers:
    slack:
      channel: '#nais-alerts-prod'
  alerts:
    - alert: metabase nede
      expr: kube_deployment_status_replicas_available{deployment="metabase"} == 0
      for: 2m
      description: "App {{ $labels.deployment }} er nede i namespace {{ $labels.kubernetes_namespace }}"
      action: "`kubectl describe pod -l app={{ $labels.deployment }} -n {{ $labels.namespace }}` for events, og `kubectl logs -l app={{ $labels.deployment }} -n {{ $labels.namespace }}` for logger"

